"use strict";(self.webpackChunk_ovh_ux_manager_documentation=self.webpackChunk_ovh_ux_manager_documentation||[]).push([[681],{7321:(e,n,t)=>{t.r(n),t.d(n,{data:()=>s});const s=JSON.parse('{"key":"v-46b70fb5","path":"/guide/testing.html","title":"Testing","lang":"en-US","frontmatter":{},"excerpt":"","headers":[],"git":{"updatedTime":1696233471000,"contributors":[{"name":"ovh-cds","email":"72250222+darsene@users.noreply.github.com","commits":1}]},"filePathRelative":"guide/testing.md"}')},8778:(e,n,t)=>{t.r(n),t.d(n,{default:()=>v});var s=t(8917);const a=(0,s._)("h1",{id:"testing",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#testing","aria-hidden":"true"},"#"),(0,s.Uk)(" Testing")],-1),i=(0,s._)("p",null,[(0,s.Uk)("Our testing configuration allows to test "),(0,s._)("code",null,".js;.ts;.jsx;.tsx"),(0,s.Uk)(" extensions. The configuration is already available at the root folder.")],-1),r={href:"https://cucumber.io/docs/gherkin/reference/",target:"_blank",rel:"noopener noreferrer"},o=(0,s.uE)('<div class="language-gherkin line-numbers-mode" data-ext="gherkin"><pre class="language-gherkin"><code><span class="token feature"><span class="token keyword">Feature:</span><span class="token important"> Shell client</span>\n</span>\n<span class="token scenario"><span class="token keyword">Scenario:</span><span class="token important"> Plugin method invokation</span></span>\n  <span class="token atrule">Given</span> <span class="token atrule">I</span> have one plugin registered in my shell\n  <span class="token atrule">And</span> My shell and shell client are configured with a direct message bus\n  <span class="token atrule">When</span> <span class="token atrule">I</span> invoke a method from my plugin\n  <span class="token atrule">Then</span> The invokation should be resolved with the method result\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),l={href:"https://github.com/bencompton/jest-cucumber",target:"_blank",rel:"noopener noreferrer"},c=(0,s._)("code",null,"jest-cucumber",-1),u=(0,s._)("code",null,".spec.ts",-1),d={href:"https://github.com/ovh/manager/blob/master/packages/components/ovh-shell/__tests__/client/shell-client.spec.ts",target:"_blank",rel:"noopener noreferrer"},h=(0,s.uE)('<p>To run all your tests, you can use the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">yarn</span> test:jest\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can also run a specific test from the root by specifying the part of a part of the path:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># This will run container tests</span>\n$ <span class="token function">yarn</span> test:jest container\n\n<span class="token comment"># This will only run the shell test</span>\n$ <span class="token function">yarn</span> test:jest shell.spec.ts\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To write a unit test:</p><ul><li>Write your use cases in a <code>.feature</code> file.</li><li>Link your feature to your test using the method <code>loadFeature</code> from <code>jest-cucumber</code>.</li><li>Start writing your use cases with the <code>given</code>, <code>when</code>, <code>then</code> methods exposed by the <code>test</code> method from <code>jest-cucumber</code>.</li></ul><p>Everything that is new should be tested. There is no coverage minimum but make sure that your main features don&#39;t break. It is appreciated if you can go further than that.</p>',7),p=(0,s._)("code",null,"React",-1),m={href:"https://testing-library.com/docs/react-testing-library/intro/",target:"_blank",rel:"noopener noreferrer"},g=(0,s._)("code",null,"@testing-library/react",-1),k=(0,s._)("p",null,[(0,s.Uk)("You can find examples under the "),(0,s._)("code",null,"container"),(0,s.Uk)(" app.")],-1),b={},v=(0,t(6049).Z)(b,[["render",function(e,n){const t=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[a,i,(0,s._)("p",null,[(0,s.Uk)("We use "),(0,s._)("a",r,[(0,s.Uk)("Gherkin"),(0,s.Wm)(t)]),(0,s.Uk)(" to help keep our tests readable and maintainable. Each test is related to a feature file that looks like this:")]),o,(0,s._)("p",null,[(0,s.Uk)("We use the package "),(0,s._)("a",l,[c,(0,s.Wm)(t)]),(0,s.Uk)(" to link our test files "),u,(0,s.Uk)(" with our features to ensure we did follow the BDD method and didn't forget any test case that we were planning on doing.")]),(0,s._)("p",null,[(0,s.Uk)("You can check out examples by clicking on this "),(0,s._)("a",d,[(0,s.Uk)("link"),(0,s.Wm)(t)])]),h,(0,s._)("p",null,[(0,s.Uk)("If you are using "),p,(0,s.Uk)(", you can test your UI by using "),(0,s._)("a",m,[g,(0,s.Wm)(t)]),(0,s.Uk)(". You can either use Gherkin to test your logic, or, if you want to test that your UI doesn't change, use snapshot testing features provided by jest.")]),k])}]])}}]);